type BMContent {
	keyPartners: String, 
	keyActivities: String, 
	valueProposition: String, 
	customerRelationships: String, 
	customerSegments: String, 
	keyResources: String, 
	channels: String, 
	costStructure: String, 
	revenueStreams: String
}

input BMInput {
	keyPartners: String, 
	keyActivities: String, 
	valueProposition: String, 
	customerRelationships: String, 
	customerSegments: String, 
	keyResources: String, 
	channels: String, 
	costStructure: String, 
	revenueStreams: String
}

type BusinessModel {
	id: String!
	name: String!
	content: BMContent
}

type Query {
	businessModel: [BusinessModel]
	businessModels(searchString: String): [BusinessModel]
}

type Mutation {
	createBusinessModel(name: String!): BusinessModel!
	editBusinessModel(id: String!, name: String, content: BMInput): BusinessModel!
	deleteBusinessModel(id: String!): BusinessModel!
}

type Subscription {
	businessModelOnEdit: BusinessModel!
	newBusinessModel: BusinessModel
	deletedBusinessModel: BusinessModel!
}